
open f a :- once {
    (a->b) in ['r -> 'read 'w -> 'write 'rw -> 'update 'a -> 'append ]
    _prolog 'open f b s
    _term 'fd s
}

split c x :- { say c
    rl x where { say c;
    rl [] :- []
    rl [h*? a t*] :- a = c and h, {rl t}
    rl x :- [x]
    }
}

readlines x :- split "\n" x

join _ [] :- ""
join c [a] :- string a
join c h,t :- {string h} ++ c ++ {join c t}

hd h,_ :- h
tl _,t :- t
null [] :- []

length [] :- 0
length h,t :- 1 + {length t}

last [x] :- x
last _,t :- last t

nth h,_ 0 :- h
nth _,t n :- nth t {n - 1}

take l 0 :- []
take h,t n :- h,{take t {n - 1}}

drop l 0 :- l
drop _,t n :- drop t {n - 1}

rev [] :- []
rev h,t :- {rev t} ++ h

abs x :- _prolog 'abs x o and o
sin x :- _prolog 'sin x o and o
pow x y :- _prolog 'pow x y o and o
asin x :- _prolog 'asin x o and o
pi is {asin 1} * 2

foldl f a [h] :- f a h
foldl f a h,t :- foldl f {f a h} t

foldr f a [h] :- f a h
foldr f a h,t :- f a {foldr f h t}

zip x* :- case: x 
    [] -> []
    x -> {[h t] is zip1 x where {
            zip1 [] :- [[] []]
            zip1 (h,[]),tt :- { [ho to] is zip1 tt; [h,ho to]}
            zip1 (h,t),tt :- { [ho to] is zip1 tt; [h,ho t,to]}
        }        
        h,{zip t*}
    }
end

map _ [] :- []
map f h,t :- {f h},{map f t}

mapstar _ [] :- []
mapstar f h,t :- {f h*},{map f t}

