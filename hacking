done:
    case statements? 
    if statements
    xor
    closures
    anonymous functions 
    foo() syntax
    y combinator
    maybe, $ call syntax
    make unify return value, avoid pattern in value
    partial pretty printer 
    strings are lists
    patterns in strings
    regex character classes and ranges
    ++ is append
    pattern composition
    == is equality does not instanciate variables
    x^l is x* , l = length(x)
    x^? is the non greedy version
    x is y 
    moved patterns into own operator =~ out of =
    moved reserved words into parser.
    standard library for lists/functions
    aggregate operators  3 + list is  {every (X in list && 3 + X)}
    simple file i/o  
    message passingr,? erlang-like concurrency 
    numerical ranges with ..
    2 ** 3
    make 3+4 work
next:

speed:
    use assoc lists for environment
    pure io for parsing - will speed it up
    prolog translation
operators
    range matches 0,1 1: 3..4
    := ? alias for is ? alias for set ?
    need to doo foo[x] 
     foo[a[b]] is z=  foo[a] and z[b]; z maybe x / 'foo / 'y hmmm -> 'foo->l in x ;'y->v in l; v  
    string interpolation, """ """ strings
    change == to evaluating operator
data types:
    sets? union intersect?
    mutable variables
    everything isn't an object - everything one of a few basic types:
        scalar, collection, function, expression (byrd points) 
     
patterns/variable quantifiers
    ' quoting to escape patterns - quoting to escape values? ::- define a function that returns a function
    closure operator i.e prevent binding foo `x
features:
    imports
    operator overloading? X + Y :- X - Y could work?
control flow?
    instead of i/o ? build repl on top of it, use threading hack
    suspended execution? thing is @foo x y lazy evaluation essentialy. x is thing 
    avoid dispatch loops or make them neat ?
    
housekeeping:
    pretty printer
    repl - seperate thread using mutex for locks or breaks
    prelude ?
 
data structures:

possible language features:
    modules ? libraries? perl like package declaration, python like modules from import import

syntax:
    xml literals? url literals?
    xpath ?

--
pattern matching.

peg operators;

postfix:
*           kleene star     any
+                           some
    {m,n}
    up to n
?                           maybe
*?                          anyz
+?                          somez    
??                          maybez

prefix:
! isnt  negative lookahead
& ahead positive lookahead

' should escape patterns

message passing/processes:
    send X blah blah blah
    recv x 1 -> 2 3 ->4
    spawn

what about asynchronous message handling? register handlers instead of 
writing a dispatch loop over and over again?

define a process

lazy evaluation through suspended execution

i.e thing = @foo 
thing x y x
thing is  @foo x



strings:
    string replacement ?
    uses prolog native strings.
    need to turn concat into a stream operator
    alternatively: treat append like cons, strings like lists

    "foo ${} $a"
    """ fooo foo
    foo foo"

    regexes?
    /foo bar /



compile to primitive forms with bird boxes, without nested blocks.

need meta types:

scalar, iterable, callable
