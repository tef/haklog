done:
    case statements? 
    if statements
    xor
    closures
    anonymous functions 
    foo() syntax
    y combinator
    maybe, $ call syntax
    make unify return value, avoid pattern in value
    partial pretty printer 
    strings are lists
    patterns in strings
    regex character classes and ranges
    ++ is append
    pattern composition
    == is equality does not instanciate variables
    x^l is x* , l = length(x)
    x^? is the non greedy version
    

next:

    length patterns
    numerical ranges
    := 
    
bugs:
    iron out bugs in unification with patterns
    isn't should match with empty list
    move reserved words into parser.
    test #! mechanism

housekeeping:
    pretty printer
    repl
    standard library for lists/functions
    prelude ?

data structures:
    string operations ? more sugar ? 
    mutable variables
    meta-types? classes/objects? alternatively meta lists - things with list semantics + others


possible language features:
    aggregate operators  3 + list is  {every (X in list && 3 + X)}
    message passing? erlang-like concurrency ? modules ? libraries?
    i/o ? 

syntax:
    xml literals? url literals?
    range matches 0,1 1: 3..4
    [] lookup foo[fofo] 
    xpath ?

--
pattern matching.

peg operators;

postfix:
*           kleene star     any
+                           some
    {m,n}
    up to n
?                           maybe
*?                          anyz
+?                          somez    
??                          maybez

prefix:
! isnt  negative lookahead
& ahead positive lookahead

message passing/processes:
    send X blah blah blah
    recv x 1 -> 2 3 ->4
    spawn

strings:
    string replacement ?
    uses prolog native strings.
    need to turn concat into a stream operator
    alternatively: treat append like cons, strings like lists

    "foo ${} $a"
    """ fooo foo
    foo foo"

    regexes?
    /foo bar /

